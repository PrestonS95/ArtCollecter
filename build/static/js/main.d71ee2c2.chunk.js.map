{"version":3,"sources":["api/index.js","components/Feature.js","components/Preview.js","components/Search.js","components/Title.js","index.js"],"names":["BASE_URL","KEY","fetchQueryResultsFromTermAndValue","term","value","a","fetch","encodeURI","split","join","response","json","data","fetchQueryResultsFromURL","url","fetchQueryResults","century","classification","queryString","fetchAllCenturies","localStorage","getItem","JSON","parse","records","setItem","stringify","fetchAllClassifications","Searchable","props","setIsLoading","setSearchResults","searchTerm","searchValue","className","href","onClick","event","preventDefault","result","console","error","Feature","featuredResult","id","title","dated","images","primaryimageurl","description","culture","style","technique","medium","dimensions","people","department","division","contact","creditline","Fragment","toLowerCase","length","map","person","idx","key","role","displayname","target","image","baseimageurl","src","alt","Preview","info","searchResults","setFeaturedResult","fetchPage","pageUrl","results","disabled","prev","next","record","Search","useState","centuryList","setCenturyList","classificationList","setClassificationList","setQueryString","setCentury","setClassification","useEffect","Promise","all","then","centuries","classifications","onSubmit","htmlFor","type","placeholder","onChange","name","Title","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d71ee2c2.chunk.js","sourcesContent":["/**\n * This file features and exports all of your calls to the API\n * \n * You need to replace YOUR_API_KEY in the string associated with KEY with your actual API key\n */\nexport const BASE_URL = 'https://api.harvardartmuseums.org';\nexport const KEY = 'apikey=deca0528-f6b1-4abe-a084-458f2cf3e59b';\n\n/**\n * This will make a call to the API for a single term and value (e.g. \"person\", and \"unknown\"), and return the result\n */\nexport async function fetchQueryResultsFromTermAndValue(term, value) {\n  try {\n    const response = await fetch(`${ BASE_URL }/object?${ KEY }&${ term }=${ encodeURI(value.split('-').join('|')) }`);\n    const data = await response.json();\n\n    return data;\n  } catch (error) {\n    throw error;\n  }\n}\n\n/**\n * This will make a call to the API for a preformed url (useful for previous and next buttons), and return the result\n */\nexport async function fetchQueryResultsFromURL(url) {\n  try {\n    const response = await fetch(url);\n    const data = await response.json();\n\n    return data;\n  } catch (error) {\n    throw error;\n  }\n}\n\n/**\n * Requires an object { century: '', classification: '', queryString: '' } to be passed in as an argument\n * \n * Then makes a call to the API, and returns the first page of results\n */\nexport async function fetchQueryResults({\n  century,\n  classification,\n  queryString,\n}) {\n  const url = `${ BASE_URL }/object?${ KEY }&classification=${ classification }&century=${ \n    century }&keyword=${ queryString }`;\n\n  try {\n    const response = await fetch(url);\n    const data = await response.json();\n\n    return data;\n  } catch (error) {\n    throw error;\n  }\n}\n\n/**\n * This returns early if there are centuries stored in localStorage, or fetches them from the API and stores them in localStorage if not\n */\nexport async function fetchAllCenturies() {\n  if (localStorage.getItem('centuries')) {\n    return JSON.parse(localStorage.getItem('centuries'));\n  }\n\n  const url = `${ BASE_URL }/century?${ KEY }&size=100&sort=temporalorder`;\n\n  try {\n    const response = await fetch(url);\n    const data = await response.json();\n    const records = data.records;\n\n    localStorage.setItem('centuries', JSON.stringify(records));\n\n    return records;\n  } catch (error) {\n    throw error;\n  }\n}\n\n/**\n * This returns early if there are classifications stored in localStorage, or fetches them from the API and stores them in localStorage if not \n */\nexport async function fetchAllClassifications() {\n  if (localStorage.getItem('classifications')) {\n    return JSON.parse(localStorage.getItem('classifications'));\n  }\n\n  const url = `${ BASE_URL }/classification?${ KEY }&size=100&sort=name`;\n\n  try {\n    const response = await fetch(url);\n    const data = await response.json();\n    const records = data.records;\n\n    localStorage.setItem('classifications', JSON.stringify(records));\n\n    return records;\n  } catch (error) {\n    throw error;\n  }\n}","import React, { Fragment } from \"react\";\n\n// Don't touch this import\nimport { fetchQueryResultsFromTermAndValue } from \"../api\";\n\nconst Searchable = (props) => {\n  const { setIsLoading, setSearchResults, searchTerm, searchValue } = props;\n\n  return (\n    <span className=\"content\">\n      <a\n        href=\"#\"\n        onClick={async (event) => {\n          event.preventDefault();\n          setIsLoading(true);\n          try {\n            const result = await fetchQueryResultsFromTermAndValue(\n              searchTerm,\n              searchValue\n            );\n            setSearchResults(result);\n          } catch (error) {\n            console.error(error, \"something broke\");\n          } finally {\n            setIsLoading(false);\n          }\n        }}\n      >\n        {searchValue}\n      </a>\n    </span>\n  );\n};\n\nconst Feature = (props) => {\n  const { featuredResult, setIsLoading, setSearchResults } = props;\n  if (!featuredResult) {\n    return (\n      <main id=\"feature\">\n        <p></p>\n      </main>\n    );\n  }\n  const {\n    title,\n    dated,\n    images,\n    primaryimageurl,\n    description,\n    culture,\n    style,\n    technique,\n    medium,\n    dimensions,\n    people,\n    department,\n    division,\n    contact,\n    creditline,\n  } = featuredResult;\n  return (\n    <main id=\"feature\">\n      <div className=\"object-feature\">\n        <header>\n          <h3>{title}</h3>\n          <h4>{dated}</h4>\n        </header>\n        <section className=\"facts\">\n          {description ? (\n            <Fragment>\n              <span className=\"title\">Description:</span>\n              <span className=\"content\">{description}</span>\n            </Fragment>\n          ) : null}\n          {culture ? (\n            <React.Fragment>\n              <span className=\"title\">Culture:</span>\n              <Searchable\n                searchTerm=\"culture\"\n                searchValue={culture}\n                setIsLoading={setIsLoading}\n                setSearchResults={setSearchResults}\n              />\n            </React.Fragment>\n          ) : null}\n          {style ? (\n            <React.Fragment>\n              <span className=\"title\">Style:</span>\n              <span className=\"content\">{style}</span>\n            </React.Fragment>\n          ) : null}\n\n          {technique ? (\n            <React.Fragment>\n              <span className=\"title\">Technique:</span>\n              <Searchable\n                searchTerm=\"technique\"\n                searchValue={technique}\n                setIsLoading={setIsLoading}\n                setSearchResults={setSearchResults}\n              />\n            </React.Fragment>\n          ) : null}\n\n          {medium ? (\n            <React.Fragment>\n              <span className=\"title\">Medium:</span>\n              <Searchable\n                searchTerm=\"medium\"\n                searchValue={medium.toLowerCase()}\n                setIsLoading={setIsLoading}\n                setSearchResults={setSearchResults}\n              />\n            </React.Fragment>\n          ) : null}\n\n          {dimensions ? (\n            <React.Fragment>\n              <span className=\"title\">Dimensions:</span>\n              <span className=\"content\">{dimensions}</span>\n            </React.Fragment>\n          ) : null}\n\n          {people && people.length\n            ? people.map((person, idx) => {\n                return (\n                  <React.Fragment key={`person-${person.role}${idx}`}>\n                    <span className=\"title\">People:</span>\n                    <Searchable\n                      \n                      searchTerm=\"person\"\n                      searchValue={person.displayname}\n                      setIsLoading={setIsLoading}\n                      setSearchResults={setSearchResults}\n                    />\n                  </React.Fragment>\n                );\n              })\n            : null}\n            {department ? (\n            <Fragment>\n              <span className=\"title\">Department:</span>\n              <span className=\"content\">{department}</span>\n            </Fragment>\n          ) : null}\n          {division ? (\n            <Fragment>\n              <span className=\"title\">Division:</span>\n              <span className=\"content\">{division}</span>\n            </Fragment>\n          ) : null}\n          {contact ? (\n            <Fragment>\n              <span className=\"title\">Contact:</span>\n              <span className=\"content\">\n              <a target=\"_blank\" href={`mailto:${contact}`}>{contact}</a></span>\n              \n            </Fragment>\n          ) : null}\n          {creditline ? (\n            <Fragment>\n              <span className=\"title\">Creditline:</span>\n              <span className=\"content\">{creditline}</span>\n            </Fragment>\n          ) : null}\n\n        </section>\n        <section className=\"photos\">\n          {images && images.length ? (\n            images.map((image, idx) => {\n              return (\n                <img\n                  key={`imageurl-${image.baseimageurl}${idx}`}\n                  src={image.baseimageurl}\n                  alt={image.baseimageurl}\n                />\n              );\n            })\n          ) : primaryimageurl ? (\n            <img src={primaryimageurl} alt={description} />\n          ) : null}\n        </section>\n      </div>\n    </main>\n  );\n};\n\nexport default Feature;\n","import React from \"react\";\n\n/**\n * We need to import fetchQueryResultsFromURL since we will sometimes have urls in info.prev and info.next\n * which are query urls.\n */\nimport { fetchQueryResultsFromURL } from \"../api\";\n\nconst Preview = (props) => {\n  const info = props.searchResults.info;\n  const records = props.searchResults.records;\n\n  const { setIsLoading, setSearchResults, setFeaturedResult } = props;\n\n  /**\n   * Destructure setSearchResults, setFeaturedResult, and setIsLoading from props\n   * and also destructure info and records from props.searchResults\n   *\n   * You need info, records, setSearchResults, setFeaturedResult, and setIsLoading as available constants\n   */\n\n  /**\n   * Don't touch this function, it's good to go.\n   *\n   * It has to be defined inside the Preview component to have access to setIsLoading, setSearchResults, etc...\n   */\n  async function fetchPage(pageUrl) {\n    setIsLoading(true);\n\n    try {\n      const results = await fetchQueryResultsFromURL(pageUrl);\n      setSearchResults(results);\n    } catch (error) {\n      console.error(error);\n    } finally {\n      setIsLoading(false);\n    }\n  }\n\n  return (\n    <aside id=\"preview\">\n      <header className=\"pagination\">\n        {/* This button should be disabled if nothing is set in info.prev, and should call fetchPage with info.prev when clicked */}\n        <button\n          disabled={info.prev ? false : true}\n          className=\"previous\"\n          onClick={()=>{\n            fetchPage(info.prev)\n          }}\n        >\n          Previous\n        </button>\n        {/* This button should be disabled if nothing is set in info.next, and should call fetchPage with info.next when clicked */}\n        <button\n          disabled={info.next ? false : true}\n          className=\"next\"\n          onClick={()=>{\n            fetchPage(info.next)\n          }}\n        >\n          Next\n        </button>\n      </header>\n      <section className=\"results\">\n        {records.map((record, idx) => {\n          return (\n            <div\n              key={idx}\n              className=\"object-preview\"\n              value={record}\n              onClick={(event) => {\n                event.preventDefault();\n                setFeaturedResult(record);\n              }}>\n              {record.primaryimageurl ? <img src={ record.primaryimageurl } alt={ record.description } /> : null}\n              {record.title ? <h3>{ record.title }</h3> : <h3>MISSING INFO</h3>}\n            </div>\n          );\n        })}\n\n        {/* /* Here we should map over the records, and render something like this for each one:\n          <div  \n            key={ index }\n            className=\"object-preview\"\n            onClick={(event) => {\n              // prevent the default\n              // set the featured result to be this record, using setFeaturedResult\n            }}>\n            { \n              // if the record.primaryimageurl exists, show this: <img src={ record.primaryimageurl } alt={ record.description } />, otherwise show nothing \n            }\n            {\n              // if the record.title exists, add this: <h3>{ record.title }</h3>, otherwise show this: <h3>MISSING INFO</h3>\n            }\n          </div>\n          */}\n      </section>\n    </aside>\n  );\n};\n\nexport default Preview;\n","import React, { useEffect, useState } from \"react\";\n\n/**\n * Don't touch these imports!\n */\nimport {\n  fetchAllCenturies,\n  fetchAllClassifications,\n  fetchQueryResults,\n} from \"../api\";\n\nconst Search = ({setIsLoading, setSearchResults}) => {\n  // Make sure to destructure setIsLoading and setSearchResults from the props\n\n  /**\n   * We are at the Search component, a child of app. This has a form, so we need to use useState for\n   * our controlled inputs:\n   *\n   * centuryList, setCenturyList (default should be an empty array, [])\n   * classificationList, setClassificationList (default should be an empty array, [])\n   * queryString, setQueryString (default should be an empty string, '')\n   * century, setCentury (default should be the string 'any')\n   * classification, setClassification (default should be the string 'any')\n   */\n  const [centuryList, setCenturyList] = useState([]);\n  const [classificationList, setClassificationList] = useState([]);\n  const [queryString, setQueryString] = useState(\"\");\n  const [century, setCentury] = useState(\"any\");\n  const [classification, setClassification] = useState(\"any\");\n\n  /**\n   * Inside of useEffect, use Promise.all([]) with fetchAllCenturies and fetchAllClassifications\n   *\n   * In the .then() callback pass the returned lists to setCenturyList and setClassificationList\n   *\n   * Make sure to console.error on caught errors from the API methods.\n   */\n  useEffect(() => {\n    try {\n      Promise.all([fetchAllCenturies(), fetchAllClassifications()]).then(\n        ([centuries, classifications]) => {\n          // setCenturyList(values[0]);\n          // setClassificationList(values[1]);\n          setCenturyList(centuries);\n          setClassificationList(classifications);\n\n\n        }\n      );\n    } catch (error) {\n      console.error(error, \"something broke\");\n    }\n  }, []);\n\n  /**\n   * This is a form element, so we need to bind an onSubmit handler to it which:\n   *\n   * calls event.preventDefault()\n   * calls setIsLoading, set it to true\n   *\n   * then, in a try/catch/finally block:\n   *\n   * try to:\n   * - get the results from fetchQueryResults({ century, classification, queryString })\n   * - pass them to setSearchResults\n   *\n   * catch: error to console.error\n   *\n   * finally: call setIsLoading, set it to false\n   */\n  return (\n    <form\n      id=\"search\"\n      onSubmit={async (event) => {\n        event.preventDefault();\n        setIsLoading(true);\n\n        try {\n          const result = await fetchQueryResults({\n            century,\n            classification,\n            queryString,\n          });\n\n          setSearchResults(result);\n        } catch (error) {\n          console.error(error, \"something broke\");\n        }\n        setIsLoading(false);\n      }}\n    >\n      <fieldset>\n        <label htmlFor=\"keywords\">Query</label>\n        <input\n          id=\"keywords\"\n          type=\"text\"\n          placeholder=\"enter keywords...\"\n          value={queryString}\n          onChange={(event)=>{\n           setQueryString(event.target.value) \n           }}\n        />\n      </fieldset>\n      <fieldset>\n        <label htmlFor=\"select-classification\">\n          Classification{\" \"}\n          <span className=\"classification-count\">\n            ({classificationList.length})\n          </span>\n        </label>\n        <select\n          name=\"classification\"\n          id=\"select-classification\"\n          value={classification}\n          onChange={(event)=>{\n            setClassification(event.target.value) \n            }}>\n          <option value=\"any\">Any</option>\n          {/* map over the classificationList, return an <option /> */}\n          {classificationList.map((classification, idx) => {\n            return (\n              <option\n                key={idx}\n                value={classification.name}\n              >{classification.name}</option>\n            );\n          })}\n        </select>\n      </fieldset>\n      <fieldset>\n        <label htmlFor=\"select-century\">\n          Century <span className=\"century-count\">({centuryList.length})</span>\n        </label>\n        <select\n          name=\"century\"\n          id=\"select-century\"\n          value={century}\n          onChange={(event)=>{\n            setCentury(event.target.value) \n            }}\n        >\n          <option value=\"any\">Any</option>\n          {/* map over the centuryList, return an <option /> */}\n          {centuryList.map((century, idx) => {\n            return <option key={idx} value={century.name}>{century.name}</option>;\n          })}\n        </select>\n      </fieldset>\n      <button>SEARCH</button>\n    </form>\n  );\n};\n\nexport default Search;\n","import React from \"react\";\n\nconst Title = () => {\n  return (\n    <div id=\"title\">\n      <h1>The Art Collector</h1>\n      <h5>Search the Harvard Art Museums' Private Collections</h5>\n    </div>\n  );\n};\n\n\nexport default Title\n\n/**\n * Create/export a component called Title which uses this static HTML as the template:\n *\n * <div id=\"title\">\n *   <h1>\n *     The Art Collector\n *   </h1>\n *   <h5>\n *     Search the Harvard Art Museums' Private Collections\n *   </h5>\n * </div>\n */\n","import React, { useState } from 'react';\nimport ReactDOM from 'react-dom';\n\n// These imports won't work until you fix ./components/index.js\nimport {\n  Feature,\n  Loading,\n  Preview,\n  Search,\n  Title\n} from './components';\n\nconst App = () => {\n  /**\n   * We are at the App level component, which is top-most. Any state which needs to be shared between immediate children should\n   * be made here, so create state pairs using useState() for:\n   * \n   * searchResults, setSearchResults (default should be this object:  {info: {}, records: []} )\n   * featuredResult, setFeaturedResult (default should be null)\n   * isLoading, setIsLoading (default should be false)\n   */\n  const [searchResults, setSearchResults] = useState({info: {}, records: []})\n  const [featuredResult, setFeaturedResult] = useState(null)\n  const [isLoading, setIsLoading] = useState(false)\n\n  return <div className=\"app\">\n    <Title />\n\n    <Search setIsLoading={setIsLoading} setSearchResults={setSearchResults}/>\n\n    <Preview searchResults={searchResults} setIsLoading={setIsLoading} setSearchResults={setSearchResults} setFeaturedResult={setFeaturedResult}/>\n    \n    <Feature featuredResult={featuredResult} setIsLoading={setIsLoading} setSearchResults={setSearchResults}/>\n  </div>\n}\n\n/**\n * Boostrap the <App /> component into the '#app' element in the DOM,\n * using ReactDOM.render();\n */\n\nReactDOM.render(<App />, document.getElementById('app'))"],"sourceRoot":""}